rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read, update, and delete their own document.
      // Allow any authenticated user to create their user document (e.g., during signup).
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // For initial signup, or can be request.auth.uid == userId
    }

    // Rules for the 'rideRequests' collection
    match /rideRequests/{rideRequestId} {
      // Allow customers to create ride requests
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Customer', 'Driver', ''];

      // Allow authenticated users to read ride requests
      allow read: if request.auth != null;

      // Allow customers or assigned drivers to update ride requests
      allow update: if request.auth != null && (
        resource.data.customerId == request.auth.uid || // Check existing document data
        resource.data.driverId == request.auth.uid ||
        request.resource.data.driverId == request.auth.uid // Allow assigning a new driverId
      );
      // Prevent deletion of ride requests
      allow delete: if false;
    }

    // Rules for the 'rideHistory' collection
    match /rideHistory/{rideHistoryId} {
      // Allow customers and drivers to read their ride history
      allow read: if request.auth != null && (
        resource.data.customerId == request.auth.uid ||
        resource.data.driverId == request.auth.uid
      );

      // Only backend can create ride history
      allow create: if false;

      // Only backend can update or delete ride history
      allow update, delete: if false;
    }
    
     // Rules for the 'scheduledRides' collection
    match /scheduledRides/{scheduledRideId} {
      // Allow customers and drivers to create scheduled rides
      allow create: if request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['Customer', 'Driver', 'Both'];

      // Allow authenticated users to read scheduled rides
      allow read: if request.auth != null;

      // Allow the customer who created the scheduled ride to update it (you might want to refine this)
      allow update: if request.auth != null &&
          resource.data.customerId == request.auth.uid;

      // Allow the customer who created the scheduled ride to delete it (you might want to refine this)
      allow delete: if request.auth != null &&
          resource.data.customerId == request.auth.uid;
      }

      // Kijiwe Collection
      match /kijiwe/{kijiweId} {
        // Allow any authenticated user to read Kijiwe information (e.g., for the dropdown)
        allow read: if request.auth != null;
        // Allow an authenticated user to create a new Kijiwe
        // (The driver becomes the adminId of this new Kijiwe)
        allow create: if request.auth != null && request.resource.data.adminId == request.auth.uid;
        
        // Allow updates by admin, or for users to manage their presence in permanentMembers or queue (used in registration)
        allow update: if request.auth != null && (
        resource.data.adminId == request.auth.uid || // Admin can update
        (request.resource.data.permanentMembers != null && // User modifying permanentMembers
          (request.resource.data.permanentMembers.hasAny([request.auth.uid]) || resource.data.permanentMembers.hasAny([request.auth.uid]))
        ) ||
        (request.resource.data.queue != null && // User modifying queue (e.g. adding self during registration)
          request.resource.data.queue.size() != resource.data.queue.size() // Basic check for queue modification
        )
      );
    }
  }
}
